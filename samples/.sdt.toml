# A general description for this configuration
description = "A test configuration, mostly to exhibit the TOML format"

# The default GLOB pattern to use in limiting files compared
glob = "*"

[commands.sql]
    # Probably any "canonicalizer" will produce OK results.
    executable = "/usr/bin/sqlformat"
    switches = [
        "--reindent_aligned",
        "--identifiers=lower",
        "--strip-comments",
        "--keywords=upper",
    ]    

[commands.ruby]
    # Might choose version not (first) on PATH, e.g.:
    # executable = /usr/local/bin/ruby2.7
    executable = "ruby"
    switches = [ "--dump=parsetree" ]

[commands.python]
    executable = "python"
    switches = [ "-m", "ast", "-a" ]

[commands.python-old]
    # Unfortunately, Python <= 3.8 does not support the direct command-line
    # use of the `ast` module.  A somewhat ugly command line—and an equally
    # unattractive parse tree—can be obtained with the following.
    executable = "python3.8"
    switches = [
        "-c",
        """\
        'import ast; \
         print(ast.dump( \
                 ast.parse( \
                 open("samples/funcs0.py").read()), \
                 annotate_fields=False, \
                 include_attributes=True).replace(", ", ",\n") )' \
        """
    ]

[commands.javascript]
    # The largish JS code passed in with -e has the additional magic
    # meta-variables ${FILENAME} and ${OPTIONS} that the Golang code will 
    # need to fill in to the JavaScript.  We assume that these same
    # meta-variables will suffice if a different parser than acorn is used.
    executable = "node"
    switches = [
        "-e",
        """\
        const acorn = require("acorn"); \
        const fs = require("fs"); \
        const source = fs.readFileSync(process.argv[1], "utf8"); \
        const parse = acorn.parse(source, ${OPTIONS}); \
        console.log(JSON.stringify(parse, null, "  ")); \
        """
    ]
    # ecmaVersion: Must be either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 
    # 9 (2018), 10 (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), 
    # or "latest" (the latest the library supports).
    # NOTE: For shell escaping, must use double quotes in strings;
    # happily, TOML gives us triple quotes to accomodate this.
    options = """{sourceType: "module", ecmaVersion: "latest"}"""

[commands.json-jq]
    # The powerful tool `jq` will allow many formatting option that
    # the standard Golang pakcage `json` does not.  However, as long
    # as the built-in is consistent, extra prettifying is unlikely 
    # to be important.  
    executable = "jq"
    switches = [".", "-M"]
